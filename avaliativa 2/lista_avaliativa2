#include <stdio.h>
#include <string.h>

#define MAX_PROF 3
#define MAX_DISC 2
#define MAX_EST 15

typedef enum {
    ESPECIALISTA,
    MESTRE,
    DOUTOR
} Titulacao;

typedef struct {
    char nome[50];
    Titulacao titulacao;
} Professor;

typedef struct {
    char nome[50];
    int matricula;
    int idade;
} Estudante;

typedef struct {
    char nome[50];
    int codigo;
    int carga_horaria;
    int qtd_est;
    Professor professor_responsavel;
    Estudante estudantes[MAX_EST];
} Disciplina;

void bubbleSort(Estudante* arr, int n) {
    int i, j;
    Estudante temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j].idade > arr[j + 1].idade) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void cadastrarProfessores(Professor* professores) {
    int i;
    printf("Cadastrar Professores\n");
    for (i = 0; i < MAX_PROF; i++) {
        printf("Professor %d\n", i + 1);
        printf("Nome: ");
        scanf("%s", professores[i].nome);
        printf("Titulacao (0 - Especialista, 1 - Mestre, 2 - Doutor): ");
        int titulacao;
        scanf("%d", &titulacao);
        professores[i].titulacao = (Titulacao)titulacao;
        printf("\n");
    }
    printf("\n");
}

void cadastrarDisciplinas(Disciplina* disciplinas, Professor* professores) {
    int i, j;
    printf("Cadastrar Disciplinas\n");
    for (i = 0; i < MAX_DISC; i++) {
        printf("Disciplina %d\n", i + 1);
        printf("Nome: ");
        scanf("%s", disciplinas[i].nome);
        printf("Codigo: ");
        scanf("%d", &disciplinas[i].codigo);
        printf("Carga Horaria: ");
        scanf("%d", &disciplinas[i].carga_horaria);
        printf("Professor Responsavel:\n");
        for (j = 0; j < MAX_PROF; j++) {
            printf("%d. %s\n", j + 1, professores[j].nome);
        }
        int opcao;
        do {
            printf("Opcao: ");
            scanf("%d", &opcao);
        } while (opcao < 1 || opcao > MAX_PROF);
        disciplinas[i].professor_responsavel = professores[opcao - 1];
        disciplinas[i].qtd_est = 0;
        printf("\n");
    }
    printf("\n");
}

void cadastrarEstudantes(Disciplina* disciplina) {
    int i;
    printf("Cadastro de Estudantes para a Disciplina %s (Codigo: %d)\n", disciplina->nome, disciplina->codigo);
    printf("-------------------------------------------------------\n");
    printf("Quantidade de estudantes (maximo %d): ", MAX_EST - disciplina->qtd_est);
    int qtd_est;
    scanf("%d", &qtd_est);
    while (qtd_est < 0 || qtd_est > MAX_EST - disciplina->qtd_est) {
        printf("Quantidade invalida. Digite novamente: ");
        scanf("%d", &qtd_est);
    }
    disciplina->qtd_est += qtd_est;

    for (i = 0; i < qtd_est; i++) {
        printf("Estudante %d\n", i + 1);
        printf("Nome: ");
        scanf("%s", disciplina->estudantes[i + disciplina->qtd_est - qtd_est].nome);
        printf("Matricula: ");
        scanf("%d", &disciplina->estudantes[i + disciplina->qtd_est - qtd_est].matricula);
        int idade;
        do {
            printf("Idade (entre 16 e 26): ");
            scanf("%d", &idade);
        } while (idade < 16 || idade > 26);
        disciplina->estudantes[i + disciplina->qtd_est - qtd_est].idade = idade;
    }
    bubbleSort(disciplina->estudantes, disciplina->qtd_est);
    printf("\n");
}

void relatorioDisciplina(Disciplina* disciplina, int ordenacao) {
    int i;
    printf("Relatorio Disciplina %d\n", disciplina->codigo);
    printf("Codigo Disciplina: %d\n", disciplina->codigo);
    printf("Nome Professor: %s\n", disciplina->professor_responsavel.nome);
    printf("Alunos Matriculados (Ordenados por idade):\n");

    if (ordenacao == 0) {
        for (i = 0; i < disciplina->qtd_est; i++) {
            printf("%d %s\n%s %d\n", disciplina->codigo, disciplina->professor_responsavel.nome,
                   disciplina->estudantes[i].nome, disciplina->estudantes[i].idade);
        }
    } else {
        for (i = disciplina->qtd_est - 1; i >= 0; i--) {
            printf("%d %s\n%s %d\n", disciplina->codigo, disciplina->professor_responsavel.nome,
                   disciplina->estudantes[i].nome, disciplina->estudantes[i].idade);
        }
    }

    printf("\n");
}

int main() {
    Professor professores[MAX_PROF];
    Disciplina disciplinas[MAX_DISC];

    cadastrarProfessores(professores);
    cadastrarDisciplinas(disciplinas, professores);

    for (int i = 0; i < MAX_DISC; i++) {
        cadastrarEstudantes(&disciplinas[i]);
    }

    relatorioDisciplina(&disciplinas[0], 1);
    relatorioDisciplina(&disciplinas[1], 0);

    return 0;
}
